/***************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * This file was automatically generated by headergen, DO NOT EDIT it.
 * headergen version: 2.1.8
 * XML versions: pp6110:1.0
 *
 * Copyright (C) 2013 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************/
#ifndef __HEADERGEN__PP6110__CACHE__H__
#define __HEADERGEN__PP6110__CACHE__H__
#include "regs-macro.h"

#define REGS_CACHE_BASE (0x60000000)

#define REGS_CACHE_VERSION "1.0"

/**
 * Register: HW_CACHE_CTL
 * Address: 0
 * SCT: no
 */
#define HW_CACHE_CTL                    (*(volatile unsigned long *)(REGS_CACHE_BASE + 0x0))
#define BP_CACHE_CTL_BUSY               15
#define BM_CACHE_CTL_BUSY               0x8000
#define BF_CACHE_CTL_BUSY(v)            (((v) << 15) & 0x8000)
/* Field: READY
 * Description: unsure about this one */
#define BP_CACHE_CTL_READY              14
#define BM_CACHE_CTL_READY              0x4000
#define BF_CACHE_CTL_READY(v)           (((v) << 14) & 0x4000)
/* Field: VECT_REMAP
 * Description: Setting this bit to 1 will make the processor use the local 
 * interrupt vector table. */
#define BP_CACHE_CTL_VECT_REMAP         4
#define BM_CACHE_CTL_VECT_REMAP         0x10
#define BF_CACHE_CTL_VECT_REMAP(v)      (((v) << 4) & 0x10)
#define BP_CACHE_CTL_INIT               2
#define BM_CACHE_CTL_INIT               0x4
#define BF_CACHE_CTL_INIT(v)            (((v) << 2) & 0x4)
#define BP_CACHE_CTL_RUN                1
#define BM_CACHE_CTL_RUN                0x2
#define BF_CACHE_CTL_RUN(v)             (((v) << 1) & 0x2)
/* Field: ENABLE
 * Description: Set this bit to 1 to enable the cache and 0 to disable it. */
#define BP_CACHE_CTL_ENABLE             0
#define BM_CACHE_CTL_ENABLE             0x1
#define BV_CACHE_CTL_ENABLE__DISABLE    0x0
#define BV_CACHE_CTL_ENABLE__ENABLE     0x1
#define BF_CACHE_CTL_ENABLE(v)          (((v) << 0) & 0x1)
#define BF_CACHE_CTL_ENABLE_V(v)        ((BV_CACHE_CTL_ENABLE__##v << 0) & 0x1)

/**
 * Register: HW_CACHE_DRAM
 * Address: 0x10
 * SCT: no
 * Description: Might have something to do with DRAM.
 */
#define HW_CACHE_DRAM           (*(volatile unsigned long *)(REGS_CACHE_BASE + 0x10))
#define BP_CACHE_DRAM_UNK7      7
#define BM_CACHE_DRAM_UNK7      0x80
#define BF_CACHE_DRAM_UNK7(v)   (((v) << 7) & 0x80)
#define BP_CACHE_DRAM_UNK2      2
#define BM_CACHE_DRAM_UNK2      0x4
#define BF_CACHE_DRAM_UNK2(v)   (((v) << 2) & 0x4)
#define BP_CACHE_DRAM_UNK0      0
#define BM_CACHE_DRAM_UNK0      0x1
#define BF_CACHE_DRAM_UNK0(v)   (((v) << 0) & 0x1)

/**
 * Register: HW_CACHE_UNK24
 * Address: 0x24
 * SCT: no
 */
#define HW_CACHE_UNK24          (*(volatile unsigned long *)(REGS_CACHE_BASE + 0x24))
#define BP_CACHE_UNK24_UNK      0
#define BM_CACHE_UNK24_UNK      0x1
#define BF_CACHE_UNK24_UNK(v)   (((v) << 0) & 0x1)

#endif /* __HEADERGEN__PP6110__CACHE__H__ */

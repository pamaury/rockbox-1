/***************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * This file was automatically generated by headergen, DO NOT EDIT it.
 * headergen version: 2.1.8
 * XML versions: pp6110:
 *
 * Copyright (C) 2013 by Amaury Pouly
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************/
#ifndef __HEADERGEN__PP6110__CLOCK__H__
#define __HEADERGEN__PP6110__CLOCK__H__
#include "regs-macro.h"

#define REGS_CLOCK_BASE (0x60006000)

#define REGS_CLOCK_VERSION ""

/**
 * Register: HW_CLOCK_RESET
 * Address: 0x4
 * SCT: no
 */
#define HW_CLOCK_RESET          (*(volatile unsigned long *)(REGS_CLOCK_BASE + 0x4))
/* Field: CACHE
 * Description: Cache or ICache ? */
#define BP_CLOCK_RESET_CACHE    31
#define BM_CLOCK_RESET_CACHE    0x80000000
#define BF_CLOCK_RESET_CACHE(v) (((v) << 31) & 0x80000000)
#define BP_CLOCK_RESET_LCD3     24
#define BM_CLOCK_RESET_LCD3     0x1000000
#define BF_CLOCK_RESET_LCD3(v)  (((v) << 24) & 0x1000000)
#define BP_CLOCK_RESET_USB1     22
#define BM_CLOCK_RESET_USB1     0x400000
#define BF_CLOCK_RESET_USB1(v)  (((v) << 22) & 0x400000)

/**
 * Register: HW_CLOCK_RESET2
 * Address: 0x8
 * SCT: no
 */
#define HW_CLOCK_RESET2 (*(volatile unsigned long *)(REGS_CLOCK_BASE + 0x8))

/**
 * Register: HW_CLOCK_ENABLE
 * Address: 0xc
 * SCT: no
 */
#define HW_CLOCK_ENABLE             (*(volatile unsigned long *)(REGS_CLOCK_BASE + 0xc))
/* Field: CACHE
 * Description: Unsure */
#define BP_CLOCK_ENABLE_CACHE       31
#define BM_CLOCK_ENABLE_CACHE       0x80000000
#define BF_CLOCK_ENABLE_CACHE(v)    (((v) << 31) & 0x80000000)
#define BP_CLOCK_ENABLE_LCD3        24
#define BM_CLOCK_ENABLE_LCD3        0x1000000
#define BF_CLOCK_ENABLE_LCD3(v)     (((v) << 24) & 0x1000000)
#define BP_CLOCK_ENABLE_USB1        22
#define BM_CLOCK_ENABLE_USB1        0x400000
#define BF_CLOCK_ENABLE_USB1(v)     (((v) << 22) & 0x400000)

/**
 * Register: HW_CLOCK_ENABLE2
 * Address: 0x10
 * SCT: no
 */
#define HW_CLOCK_ENABLE2    (*(volatile unsigned long *)(REGS_CLOCK_BASE + 0x10))

/**
 * Register: HW_CLOCK_SOURCE
 * Address: 0x20
 * SCT: no
 */
#define HW_CLOCK_SOURCE                 (*(volatile unsigned long *)(REGS_CLOCK_BASE + 0x20))
#define BP_CLOCK_SOURCE_SELECT          28
#define BM_CLOCK_SOURCE_SELECT          0x70000000
#define BV_CLOCK_SOURCE_SELECT__SRC1    0x1
#define BV_CLOCK_SOURCE_SELECT__SRC2    0x2
#define BV_CLOCK_SOURCE_SELECT__SRC3    0x3
#define BV_CLOCK_SOURCE_SELECT__SRC4    0x4
#define BF_CLOCK_SOURCE_SELECT(v)       (((v) << 28) & 0x70000000)
#define BF_CLOCK_SOURCE_SELECT_V(v)     ((BV_CLOCK_SOURCE_SELECT__##v << 28) & 0x70000000)
/* Field: DIV_FAST
 * Description: FAST = PLL   / (DIV_FAST + 1) */
#define BP_CLOCK_SOURCE_DIV_FAST        20
#define BM_CLOCK_SOURCE_DIV_FAST        0xf00000
#define BF_CLOCK_SOURCE_DIV_FAST(v)     (((v) << 20) & 0xf00000)
/* Field: DIV_SLOW
 * Description: SLOW = 24MHz / (DIV_SLOW + 1) */
#define BP_CLOCK_SOURCE_DIV_SLOW        16
#define BM_CLOCK_SOURCE_DIV_SLOW        0xf0000
#define BF_CLOCK_SOURCE_DIV_SLOW(v)     (((v) << 16) & 0xf0000)
#define BP_CLOCK_SOURCE_SRC4            12
#define BM_CLOCK_SOURCE_SRC4            0xf000
#define BF_CLOCK_SOURCE_SRC4(v)         (((v) << 12) & 0xf000)
#define BP_CLOCK_SOURCE_SRC3            8
#define BM_CLOCK_SOURCE_SRC3            0xf00
#define BF_CLOCK_SOURCE_SRC3(v)         (((v) << 8) & 0xf00)
#define BP_CLOCK_SOURCE_SRC2            4
#define BM_CLOCK_SOURCE_SRC2            0xf0
#define BF_CLOCK_SOURCE_SRC2(v)         (((v) << 4) & 0xf0)
#define BP_CLOCK_SOURCE_SRC1            0
#define BM_CLOCK_SOURCE_SRC1            0xf
#define BV_CLOCK_SOURCE_SRC1__32KHz     0x0
#define BV_CLOCK_SOURCE_SRC1__16MHz     0x1
#define BV_CLOCK_SOURCE_SRC1__24MHz     0x2
#define BV_CLOCK_SOURCE_SRC1__33MHz     0x3
#define BV_CLOCK_SOURCE_SRC1__48MHz     0x4
#define BV_CLOCK_SOURCE_SRC1__SLOW      0x5
#define BV_CLOCK_SOURCE_SRC1__FAST      0x6
#define BV_CLOCK_SOURCE_SRC1__PLL       0x7
#define BF_CLOCK_SOURCE_SRC1(v)         (((v) << 0) & 0xf)
#define BF_CLOCK_SOURCE_SRC1_V(v)       ((BV_CLOCK_SOURCE_SRC1__##v << 0) & 0xf)

/**
 * Register: HW_CLOCK_SOURCE2
 * Address: 0x24
 * SCT: no
 */
#define HW_CLOCK_SOURCE2                (*(volatile unsigned long *)(REGS_CLOCK_BASE + 0x24))
#define BP_CLOCK_SOURCE2_SELECT         28
#define BM_CLOCK_SOURCE2_SELECT         0x70000000
#define BV_CLOCK_SOURCE2_SELECT__SRC1   0x1
#define BV_CLOCK_SOURCE2_SELECT__SRC2   0x2
#define BV_CLOCK_SOURCE2_SELECT__SRC3   0x3
#define BV_CLOCK_SOURCE2_SELECT__SRC4   0x4
#define BF_CLOCK_SOURCE2_SELECT(v)      (((v) << 28) & 0x70000000)
#define BF_CLOCK_SOURCE2_SELECT_V(v)    ((BV_CLOCK_SOURCE2_SELECT__##v << 28) & 0x70000000)
#define BP_CLOCK_SOURCE2_DIV_FAST       20
#define BM_CLOCK_SOURCE2_DIV_FAST       0xf00000
#define BF_CLOCK_SOURCE2_DIV_FAST(v)    (((v) << 20) & 0xf00000)
#define BP_CLOCK_SOURCE2_DIV_SLOW       16
#define BM_CLOCK_SOURCE2_DIV_SLOW       0xf0000
#define BF_CLOCK_SOURCE2_DIV_SLOW(v)    (((v) << 16) & 0xf0000)
#define BP_CLOCK_SOURCE2_SRC4           12
#define BM_CLOCK_SOURCE2_SRC4           0xf000
#define BF_CLOCK_SOURCE2_SRC4(v)        (((v) << 12) & 0xf000)
#define BP_CLOCK_SOURCE2_SRC3           8
#define BM_CLOCK_SOURCE2_SRC3           0xf00
#define BF_CLOCK_SOURCE2_SRC3(v)        (((v) << 8) & 0xf00)
#define BP_CLOCK_SOURCE2_SRC2           4
#define BM_CLOCK_SOURCE2_SRC2           0xf0
#define BF_CLOCK_SOURCE2_SRC2(v)        (((v) << 4) & 0xf0)
#define BP_CLOCK_SOURCE2_SRC1           0
#define BM_CLOCK_SOURCE2_SRC1           0xf
#define BV_CLOCK_SOURCE2_SRC1__32KHz    0x0
#define BV_CLOCK_SOURCE2_SRC1__16MHz    0x1
#define BV_CLOCK_SOURCE2_SRC1__24MHz    0x2
#define BV_CLOCK_SOURCE2_SRC1__33MHz    0x3
#define BV_CLOCK_SOURCE2_SRC1__48MHz    0x4
#define BV_CLOCK_SOURCE2_SRC1__SLOW     0x5
#define BV_CLOCK_SOURCE2_SRC1__FAST     0x6
#define BV_CLOCK_SOURCE2_SRC1__PLL      0x7
#define BF_CLOCK_SOURCE2_SRC1(v)        (((v) << 0) & 0xf)
#define BF_CLOCK_SOURCE2_SRC1_V(v)      ((BV_CLOCK_SOURCE2_SRC1__##v << 0) & 0xf)

/**
 * Register: HW_CLOCK_MLCD_SCLK_DIV
 * Address: 0x2c
 * SCT: no
 */
#define HW_CLOCK_MLCD_SCLK_DIV  (*(volatile unsigned long *)(REGS_CLOCK_BASE + 0x2c))

/**
 * Register: HW_CLOCK_PLL_CTRL
 * Address: 0x34
 * SCT: no
 */
#define HW_CLOCK_PLL_CTRL           (*(volatile unsigned long *)(REGS_CLOCK_BASE + 0x34))
#define BP_CLOCK_PLL_CTRL_RESET     23
#define BM_CLOCK_PLL_CTRL_RESET     0x800000
#define BF_CLOCK_PLL_CTRL_RESET(v)  (((v) << 23) & 0x800000)

/**
 * Register: HW_CLOCK_PLL_CTRL2
 * Address: 0x38
 * SCT: no
 */
#define HW_CLOCK_PLL_CTRL2                  (*(volatile unsigned long *)(REGS_CLOCK_BASE + 0x38))
/* Field: LOCK_STATUS
 * Description: Unsure */
#define BP_CLOCK_PLL_CTRL2_LOCK_STATUS      30
#define BM_CLOCK_PLL_CTRL2_LOCK_STATUS      0xc0000000
#define BF_CLOCK_PLL_CTRL2_LOCK_STATUS(v)   (((v) << 30) & 0xc0000000)
#define BP_CLOCK_PLL_CTRL2_RESET            23
#define BM_CLOCK_PLL_CTRL2_RESET            0x800000
#define BF_CLOCK_PLL_CTRL2_RESET(v)         (((v) << 23) & 0x800000)

/**
 * Register: HW_CLOCK_PLL_STATUS
 * Address: 0x3c
 * SCT: no
 */
#define HW_CLOCK_PLL_STATUS (*(volatile unsigned long *)(REGS_CLOCK_BASE + 0x3c))

/**
 * Register: HW_CLOCK_CACHE
 * Address: 0x50
 * SCT: no
 * Description: Unsure
 */
#define HW_CLOCK_CACHE              (*(volatile unsigned long *)(REGS_CLOCK_BASE + 0x50))
/* Field: ENABLE
 * Description: Unsure */
#define BP_CLOCK_CACHE_ENABLE       5
#define BM_CLOCK_CACHE_ENABLE       0x20
#define BF_CLOCK_CACHE_ENABLE(v)    (((v) << 5) & 0x20)

/**
 * Register: HW_CLOCK_LCD3
 * Address: 0xdc
 * SCT: no
 */
#define HW_CLOCK_LCD3           (*(volatile unsigned long *)(REGS_CLOCK_BASE + 0xdc))
/* Field: DIV
 * Description: Derive DOTCLK frequency from 24MHz source. */
#define BP_CLOCK_LCD3_DIV       0
#define BM_CLOCK_LCD3_DIV       0xffffffff
#define BF_CLOCK_LCD3_DIV(v)    (((v) << 0) & 0xffffffff)

#endif /* __HEADERGEN__PP6110__CLOCK__H__ */

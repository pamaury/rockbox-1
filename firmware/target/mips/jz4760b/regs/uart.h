/***************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * This file was automatically generated by headergen, DO NOT EDIT it.
 * headergen version: 3.0.0
 * jz4760b version: 1.0
 * jz4760b authors: Amaury Pouly
 *
 * Copyright (C) 2015 by the authors
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************/
#ifndef __HEADERGEN_UART_H__
#define __HEADERGEN_UART_H__

#include "macro.h"

#define REG_UART_RDR(_n1)   jz_reg(UART_RDR(_n1))
#define JA_UART_RDR(_n1)    (((_n1) == 0 ? 0xb0030000 : (_n1) == 1 ? 0xb0031000 : (_n1) == 2 ? 0xb0032000 : 0xb0033000) + 0x0)
#define JT_UART_RDR(_n1)    JIO_32_RW
#define JN_UART_RDR(_n1)    UART_RDR
#define JI_UART_RDR(_n1)    (_n1)

#define REG_UART_TDR(_n1)   jz_reg(UART_TDR(_n1))
#define JA_UART_TDR(_n1)    (((_n1) == 0 ? 0xb0030000 : (_n1) == 1 ? 0xb0031000 : (_n1) == 2 ? 0xb0032000 : 0xb0033000) + 0x0)
#define JT_UART_TDR(_n1)    JIO_32_RW
#define JN_UART_TDR(_n1)    UART_TDR
#define JI_UART_TDR(_n1)    (_n1)

#define REG_UART_DLLR(_n1)  jz_reg(UART_DLLR(_n1))
#define JA_UART_DLLR(_n1)   (((_n1) == 0 ? 0xb0030000 : (_n1) == 1 ? 0xb0031000 : (_n1) == 2 ? 0xb0032000 : 0xb0033000) + 0x0)
#define JT_UART_DLLR(_n1)   JIO_32_RW
#define JN_UART_DLLR(_n1)   UART_DLLR
#define JI_UART_DLLR(_n1)   (_n1)

#define REG_UART_DLHR(_n1)  jz_reg(UART_DLHR(_n1))
#define JA_UART_DLHR(_n1)   (((_n1) == 0 ? 0xb0030000 : (_n1) == 1 ? 0xb0031000 : (_n1) == 2 ? 0xb0032000 : 0xb0033000) + 0x4)
#define JT_UART_DLHR(_n1)   JIO_32_RW
#define JN_UART_DLHR(_n1)   UART_DLHR
#define JI_UART_DLHR(_n1)   (_n1)

#define REG_UART_IER(_n1)       jz_reg(UART_IER(_n1))
#define JA_UART_IER(_n1)        (((_n1) == 0 ? 0xb0030000 : (_n1) == 1 ? 0xb0031000 : (_n1) == 2 ? 0xb0032000 : 0xb0033000) + 0x4)
#define JT_UART_IER(_n1)        JIO_32_RW
#define JN_UART_IER(_n1)        UART_IER
#define JI_UART_IER(_n1)        (_n1)
#define BP_UART_IER_RTIE        4
#define BM_UART_IER_RTIE        0x10
#define BF_UART_IER_RTIE(v)     (((v) & 0x1) << 4)
#define BFM_UART_IER_RTIE(v)    BM_UART_IER_RTIE
#define BF_UART_IER_RTIE_V(e)   BF_UART_IER_RTIE(BV_UART_IER_RTIE__##e)
#define BFM_UART_IER_RTIE_V(v)  BM_UART_IER_RTIE
#define BP_UART_IER_MIE         3
#define BM_UART_IER_MIE         0x8
#define BF_UART_IER_MIE(v)      (((v) & 0x1) << 3)
#define BFM_UART_IER_MIE(v)     BM_UART_IER_MIE
#define BF_UART_IER_MIE_V(e)    BF_UART_IER_MIE(BV_UART_IER_MIE__##e)
#define BFM_UART_IER_MIE_V(v)   BM_UART_IER_MIE
#define BP_UART_IER_RLIE        2
#define BM_UART_IER_RLIE        0x4
#define BF_UART_IER_RLIE(v)     (((v) & 0x1) << 2)
#define BFM_UART_IER_RLIE(v)    BM_UART_IER_RLIE
#define BF_UART_IER_RLIE_V(e)   BF_UART_IER_RLIE(BV_UART_IER_RLIE__##e)
#define BFM_UART_IER_RLIE_V(v)  BM_UART_IER_RLIE
#define BP_UART_IER_TIE         1
#define BM_UART_IER_TIE         0x2
#define BF_UART_IER_TIE(v)      (((v) & 0x1) << 1)
#define BFM_UART_IER_TIE(v)     BM_UART_IER_TIE
#define BF_UART_IER_TIE_V(e)    BF_UART_IER_TIE(BV_UART_IER_TIE__##e)
#define BFM_UART_IER_TIE_V(v)   BM_UART_IER_TIE
#define BP_UART_IER_RIE         0
#define BM_UART_IER_RIE         0x1
#define BF_UART_IER_RIE(v)      (((v) & 0x1) << 0)
#define BFM_UART_IER_RIE(v)     BM_UART_IER_RIE
#define BF_UART_IER_RIE_V(e)    BF_UART_IER_RIE(BV_UART_IER_RIE__##e)
#define BFM_UART_IER_RIE_V(v)   BM_UART_IER_RIE

#define REG_UART_ISR(_n1)           jz_reg(UART_ISR(_n1))
#define JA_UART_ISR(_n1)            (((_n1) == 0 ? 0xb0030000 : (_n1) == 1 ? 0xb0031000 : (_n1) == 2 ? 0xb0032000 : 0xb0033000) + 0x8)
#define JT_UART_ISR(_n1)            JIO_32_RW
#define JN_UART_ISR(_n1)            UART_ISR
#define JI_UART_ISR(_n1)            (_n1)
#define BP_UART_ISR_IID_THRI        1
#define BM_UART_ISR_IID_THRI        0x2
#define BF_UART_ISR_IID_THRI(v)     (((v) & 0x1) << 1)
#define BFM_UART_ISR_IID_THRI(v)    BM_UART_ISR_IID_THRI
#define BF_UART_ISR_IID_THRI_V(e)   BF_UART_ISR_IID_THRI(BV_UART_ISR_IID_THRI__##e)
#define BFM_UART_ISR_IID_THRI_V(v)  BM_UART_ISR_IID_THRI
#define BP_UART_ISR_IP              0
#define BM_UART_ISR_IP              0x1
#define BF_UART_ISR_IP(v)           (((v) & 0x1) << 0)
#define BFM_UART_ISR_IP(v)          BM_UART_ISR_IP
#define BF_UART_ISR_IP_V(e)         BF_UART_ISR_IP(BV_UART_ISR_IP__##e)
#define BFM_UART_ISR_IP_V(v)        BM_UART_ISR_IP

#define REG_UART_FCR(_n1)           jz_reg(UART_FCR(_n1))
#define JA_UART_FCR(_n1)            (((_n1) == 0 ? 0xb0030000 : (_n1) == 1 ? 0xb0031000 : (_n1) == 2 ? 0xb0032000 : 0xb0033000) + 0x8)
#define JT_UART_FCR(_n1)            JIO_32_RW
#define JN_UART_FCR(_n1)            UART_FCR
#define JI_UART_FCR(_n1)            (_n1)
#define BP_UART_FCR_RTRG_4          6
#define BM_UART_FCR_RTRG_4          0x40
#define BF_UART_FCR_RTRG_4(v)       (((v) & 0x1) << 6)
#define BFM_UART_FCR_RTRG_4(v)      BM_UART_FCR_RTRG_4
#define BF_UART_FCR_RTRG_4_V(e)     BF_UART_FCR_RTRG_4(BV_UART_FCR_RTRG_4__##e)
#define BFM_UART_FCR_RTRG_4_V(v)    BM_UART_FCR_RTRG_4
#define BP_UART_FCR_UUE             4
#define BM_UART_FCR_UUE             0x10
#define BF_UART_FCR_UUE(v)          (((v) & 0x1) << 4)
#define BFM_UART_FCR_UUE(v)         BM_UART_FCR_UUE
#define BF_UART_FCR_UUE_V(e)        BF_UART_FCR_UUE(BV_UART_FCR_UUE__##e)
#define BFM_UART_FCR_UUE_V(v)       BM_UART_FCR_UUE
#define BP_UART_FCR_DMS             3
#define BM_UART_FCR_DMS             0x8
#define BF_UART_FCR_DMS(v)          (((v) & 0x1) << 3)
#define BFM_UART_FCR_DMS(v)         BM_UART_FCR_DMS
#define BF_UART_FCR_DMS_V(e)        BF_UART_FCR_DMS(BV_UART_FCR_DMS__##e)
#define BFM_UART_FCR_DMS_V(v)       BM_UART_FCR_DMS
#define BP_UART_FCR_TFLS            2
#define BM_UART_FCR_TFLS            0x4
#define BF_UART_FCR_TFLS(v)         (((v) & 0x1) << 2)
#define BFM_UART_FCR_TFLS(v)        BM_UART_FCR_TFLS
#define BF_UART_FCR_TFLS_V(e)       BF_UART_FCR_TFLS(BV_UART_FCR_TFLS__##e)
#define BFM_UART_FCR_TFLS_V(v)      BM_UART_FCR_TFLS
#define BP_UART_FCR_RFLS            1
#define BM_UART_FCR_RFLS            0x2
#define BF_UART_FCR_RFLS(v)         (((v) & 0x1) << 1)
#define BFM_UART_FCR_RFLS(v)        BM_UART_FCR_RFLS
#define BF_UART_FCR_RFLS_V(e)       BF_UART_FCR_RFLS(BV_UART_FCR_RFLS__##e)
#define BFM_UART_FCR_RFLS_V(v)      BM_UART_FCR_RFLS
#define BP_UART_FCR_FE              0
#define BM_UART_FCR_FE              0x1
#define BF_UART_FCR_FE(v)           (((v) & 0x1) << 0)
#define BFM_UART_FCR_FE(v)          BM_UART_FCR_FE
#define BF_UART_FCR_FE_V(e)         BF_UART_FCR_FE(BV_UART_FCR_FE__##e)
#define BFM_UART_FCR_FE_V(v)        BM_UART_FCR_FE

#define REG_UART_LCR(_n1)           jz_reg(UART_LCR(_n1))
#define JA_UART_LCR(_n1)            (((_n1) == 0 ? 0xb0030000 : (_n1) == 1 ? 0xb0031000 : (_n1) == 2 ? 0xb0032000 : 0xb0033000) + 0xc)
#define JT_UART_LCR(_n1)            JIO_32_RW
#define JN_UART_LCR(_n1)            UART_LCR
#define JI_UART_LCR(_n1)            (_n1)
#define BP_UART_LCR_DLAB            7
#define BM_UART_LCR_DLAB            0x80
#define BF_UART_LCR_DLAB(v)         (((v) & 0x1) << 7)
#define BFM_UART_LCR_DLAB(v)        BM_UART_LCR_DLAB
#define BF_UART_LCR_DLAB_V(e)       BF_UART_LCR_DLAB(BV_UART_LCR_DLAB__##e)
#define BFM_UART_LCR_DLAB_V(v)      BM_UART_LCR_DLAB
#define BP_UART_LCR_SBRK            6
#define BM_UART_LCR_SBRK            0x40
#define BF_UART_LCR_SBRK(v)         (((v) & 0x1) << 6)
#define BFM_UART_LCR_SBRK(v)        BM_UART_LCR_SBRK
#define BF_UART_LCR_SBRK_V(e)       BF_UART_LCR_SBRK(BV_UART_LCR_SBRK__##e)
#define BFM_UART_LCR_SBRK_V(v)      BM_UART_LCR_SBRK
#define BP_UART_LCR_SPAR            5
#define BM_UART_LCR_SPAR            0x20
#define BF_UART_LCR_SPAR(v)         (((v) & 0x1) << 5)
#define BFM_UART_LCR_SPAR(v)        BM_UART_LCR_SPAR
#define BF_UART_LCR_SPAR_V(e)       BF_UART_LCR_SPAR(BV_UART_LCR_SPAR__##e)
#define BFM_UART_LCR_SPAR_V(v)      BM_UART_LCR_SPAR
#define BP_UART_LCR_PROE            4
#define BM_UART_LCR_PROE            0x10
#define BF_UART_LCR_PROE(v)         (((v) & 0x1) << 4)
#define BFM_UART_LCR_PROE(v)        BM_UART_LCR_PROE
#define BF_UART_LCR_PROE_V(e)       BF_UART_LCR_PROE(BV_UART_LCR_PROE__##e)
#define BFM_UART_LCR_PROE_V(v)      BM_UART_LCR_PROE
#define BP_UART_LCR_PE              3
#define BM_UART_LCR_PE              0x8
#define BF_UART_LCR_PE(v)           (((v) & 0x1) << 3)
#define BFM_UART_LCR_PE(v)          BM_UART_LCR_PE
#define BF_UART_LCR_PE_V(e)         BF_UART_LCR_PE(BV_UART_LCR_PE__##e)
#define BFM_UART_LCR_PE_V(v)        BM_UART_LCR_PE
#define BP_UART_LCR_STOP2           2
#define BM_UART_LCR_STOP2           0x4
#define BF_UART_LCR_STOP2(v)        (((v) & 0x1) << 2)
#define BFM_UART_LCR_STOP2(v)       BM_UART_LCR_STOP2
#define BF_UART_LCR_STOP2_V(e)      BF_UART_LCR_STOP2(BV_UART_LCR_STOP2__##e)
#define BFM_UART_LCR_STOP2_V(v)     BM_UART_LCR_STOP2
#define BP_UART_LCR_WLEN_6          0
#define BM_UART_LCR_WLEN_6          0x1
#define BF_UART_LCR_WLEN_6(v)       (((v) & 0x1) << 0)
#define BFM_UART_LCR_WLEN_6(v)      BM_UART_LCR_WLEN_6
#define BF_UART_LCR_WLEN_6_V(e)     BF_UART_LCR_WLEN_6(BV_UART_LCR_WLEN_6__##e)
#define BFM_UART_LCR_WLEN_6_V(v)    BM_UART_LCR_WLEN_6

#define REG_UART_MCR(_n1)       jz_reg(UART_MCR(_n1))
#define JA_UART_MCR(_n1)        (((_n1) == 0 ? 0xb0030000 : (_n1) == 1 ? 0xb0031000 : (_n1) == 2 ? 0xb0032000 : 0xb0033000) + 0x10)
#define JT_UART_MCR(_n1)        JIO_32_RW
#define JN_UART_MCR(_n1)        UART_MCR
#define JI_UART_MCR(_n1)        (_n1)
#define BP_UART_MCR_MCE         7
#define BM_UART_MCR_MCE         0x80
#define BF_UART_MCR_MCE(v)      (((v) & 0x1) << 7)
#define BFM_UART_MCR_MCE(v)     BM_UART_MCR_MCE
#define BF_UART_MCR_MCE_V(e)    BF_UART_MCR_MCE(BV_UART_MCR_MCE__##e)
#define BFM_UART_MCR_MCE_V(v)   BM_UART_MCR_MCE
#define BP_UART_MCR_FCM         6
#define BM_UART_MCR_FCM         0x40
#define BF_UART_MCR_FCM(v)      (((v) & 0x1) << 6)
#define BFM_UART_MCR_FCM(v)     BM_UART_MCR_FCM
#define BF_UART_MCR_FCM_V(e)    BF_UART_MCR_FCM(BV_UART_MCR_FCM__##e)
#define BFM_UART_MCR_FCM_V(v)   BM_UART_MCR_FCM
#define BP_UART_MCR_LOOP        4
#define BM_UART_MCR_LOOP        0x10
#define BF_UART_MCR_LOOP(v)     (((v) & 0x1) << 4)
#define BFM_UART_MCR_LOOP(v)    BM_UART_MCR_LOOP
#define BF_UART_MCR_LOOP_V(e)   BF_UART_MCR_LOOP(BV_UART_MCR_LOOP__##e)
#define BFM_UART_MCR_LOOP_V(v)  BM_UART_MCR_LOOP
#define BP_UART_MCR_RTS         1
#define BM_UART_MCR_RTS         0x2
#define BF_UART_MCR_RTS(v)      (((v) & 0x1) << 1)
#define BFM_UART_MCR_RTS(v)     BM_UART_MCR_RTS
#define BF_UART_MCR_RTS_V(e)    BF_UART_MCR_RTS(BV_UART_MCR_RTS__##e)
#define BFM_UART_MCR_RTS_V(v)   BM_UART_MCR_RTS

#define REG_UART_LSR(_n1)       jz_reg(UART_LSR(_n1))
#define JA_UART_LSR(_n1)        (((_n1) == 0 ? 0xb0030000 : (_n1) == 1 ? 0xb0031000 : (_n1) == 2 ? 0xb0032000 : 0xb0033000) + 0x14)
#define JT_UART_LSR(_n1)        JIO_32_RW
#define JN_UART_LSR(_n1)        UART_LSR
#define JI_UART_LSR(_n1)        (_n1)
#define BP_UART_LSR_RFER        7
#define BM_UART_LSR_RFER        0x80
#define BF_UART_LSR_RFER(v)     (((v) & 0x1) << 7)
#define BFM_UART_LSR_RFER(v)    BM_UART_LSR_RFER
#define BF_UART_LSR_RFER_V(e)   BF_UART_LSR_RFER(BV_UART_LSR_RFER__##e)
#define BFM_UART_LSR_RFER_V(v)  BM_UART_LSR_RFER
#define BP_UART_LSR_TEMT        6
#define BM_UART_LSR_TEMT        0x40
#define BF_UART_LSR_TEMT(v)     (((v) & 0x1) << 6)
#define BFM_UART_LSR_TEMT(v)    BM_UART_LSR_TEMT
#define BF_UART_LSR_TEMT_V(e)   BF_UART_LSR_TEMT(BV_UART_LSR_TEMT__##e)
#define BFM_UART_LSR_TEMT_V(v)  BM_UART_LSR_TEMT
#define BP_UART_LSR_TDRQ        5
#define BM_UART_LSR_TDRQ        0x20
#define BF_UART_LSR_TDRQ(v)     (((v) & 0x1) << 5)
#define BFM_UART_LSR_TDRQ(v)    BM_UART_LSR_TDRQ
#define BF_UART_LSR_TDRQ_V(e)   BF_UART_LSR_TDRQ(BV_UART_LSR_TDRQ__##e)
#define BFM_UART_LSR_TDRQ_V(v)  BM_UART_LSR_TDRQ
#define BP_UART_LSR_BRK         4
#define BM_UART_LSR_BRK         0x10
#define BF_UART_LSR_BRK(v)      (((v) & 0x1) << 4)
#define BFM_UART_LSR_BRK(v)     BM_UART_LSR_BRK
#define BF_UART_LSR_BRK_V(e)    BF_UART_LSR_BRK(BV_UART_LSR_BRK__##e)
#define BFM_UART_LSR_BRK_V(v)   BM_UART_LSR_BRK
#define BP_UART_LSR_FER         3
#define BM_UART_LSR_FER         0x8
#define BF_UART_LSR_FER(v)      (((v) & 0x1) << 3)
#define BFM_UART_LSR_FER(v)     BM_UART_LSR_FER
#define BF_UART_LSR_FER_V(e)    BF_UART_LSR_FER(BV_UART_LSR_FER__##e)
#define BFM_UART_LSR_FER_V(v)   BM_UART_LSR_FER
#define BP_UART_LSR_PER         2
#define BM_UART_LSR_PER         0x4
#define BF_UART_LSR_PER(v)      (((v) & 0x1) << 2)
#define BFM_UART_LSR_PER(v)     BM_UART_LSR_PER
#define BF_UART_LSR_PER_V(e)    BF_UART_LSR_PER(BV_UART_LSR_PER__##e)
#define BFM_UART_LSR_PER_V(v)   BM_UART_LSR_PER
#define BP_UART_LSR_ORER        1
#define BM_UART_LSR_ORER        0x2
#define BF_UART_LSR_ORER(v)     (((v) & 0x1) << 1)
#define BFM_UART_LSR_ORER(v)    BM_UART_LSR_ORER
#define BF_UART_LSR_ORER_V(e)   BF_UART_LSR_ORER(BV_UART_LSR_ORER__##e)
#define BFM_UART_LSR_ORER_V(v)  BM_UART_LSR_ORER
#define BP_UART_LSR_DR          0
#define BM_UART_LSR_DR          0x1
#define BF_UART_LSR_DR(v)       (((v) & 0x1) << 0)
#define BFM_UART_LSR_DR(v)      BM_UART_LSR_DR
#define BF_UART_LSR_DR_V(e)     BF_UART_LSR_DR(BV_UART_LSR_DR__##e)
#define BFM_UART_LSR_DR_V(v)    BM_UART_LSR_DR

#define REG_UART_MSR(_n1)   jz_reg(UART_MSR(_n1))
#define JA_UART_MSR(_n1)    (((_n1) == 0 ? 0xb0030000 : (_n1) == 1 ? 0xb0031000 : (_n1) == 2 ? 0xb0032000 : 0xb0033000) + 0x18)
#define JT_UART_MSR(_n1)    JIO_32_RW
#define JN_UART_MSR(_n1)    UART_MSR
#define JI_UART_MSR(_n1)    (_n1)

#define REG_UART_SPR(_n1)   jz_reg(UART_SPR(_n1))
#define JA_UART_SPR(_n1)    (((_n1) == 0 ? 0xb0030000 : (_n1) == 1 ? 0xb0031000 : (_n1) == 2 ? 0xb0032000 : 0xb0033000) + 0x1c)
#define JT_UART_SPR(_n1)    JIO_32_RW
#define JN_UART_SPR(_n1)    UART_SPR
#define JI_UART_SPR(_n1)    (_n1)

#define REG_UART_SIRCR(_n1)         jz_reg(UART_SIRCR(_n1))
#define JA_UART_SIRCR(_n1)          (((_n1) == 0 ? 0xb0030000 : (_n1) == 1 ? 0xb0031000 : (_n1) == 2 ? 0xb0032000 : 0xb0033000) + 0x20)
#define JT_UART_SIRCR(_n1)          JIO_32_RW
#define JN_UART_SIRCR(_n1)          UART_SIRCR
#define JI_UART_SIRCR(_n1)          (_n1)
#define BP_UART_SIRCR_RDPL          4
#define BM_UART_SIRCR_RDPL          0x10
#define BF_UART_SIRCR_RDPL(v)       (((v) & 0x1) << 4)
#define BFM_UART_SIRCR_RDPL(v)      BM_UART_SIRCR_RDPL
#define BF_UART_SIRCR_RDPL_V(e)     BF_UART_SIRCR_RDPL(BV_UART_SIRCR_RDPL__##e)
#define BFM_UART_SIRCR_RDPL_V(v)    BM_UART_SIRCR_RDPL
#define BP_UART_SIRCR_TDPL          3
#define BM_UART_SIRCR_TDPL          0x8
#define BF_UART_SIRCR_TDPL(v)       (((v) & 0x1) << 3)
#define BFM_UART_SIRCR_TDPL(v)      BM_UART_SIRCR_TDPL
#define BF_UART_SIRCR_TDPL_V(e)     BF_UART_SIRCR_TDPL(BV_UART_SIRCR_TDPL__##e)
#define BFM_UART_SIRCR_TDPL_V(v)    BM_UART_SIRCR_TDPL
#define BP_UART_SIRCR_TPWS          2
#define BM_UART_SIRCR_TPWS          0x4
#define BF_UART_SIRCR_TPWS(v)       (((v) & 0x1) << 2)
#define BFM_UART_SIRCR_TPWS(v)      BM_UART_SIRCR_TPWS
#define BF_UART_SIRCR_TPWS_V(e)     BF_UART_SIRCR_TPWS(BV_UART_SIRCR_TPWS__##e)
#define BFM_UART_SIRCR_TPWS_V(v)    BM_UART_SIRCR_TPWS
#define BP_UART_SIRCR_RSIRE         1
#define BM_UART_SIRCR_RSIRE         0x2
#define BF_UART_SIRCR_RSIRE(v)      (((v) & 0x1) << 1)
#define BFM_UART_SIRCR_RSIRE(v)     BM_UART_SIRCR_RSIRE
#define BF_UART_SIRCR_RSIRE_V(e)    BF_UART_SIRCR_RSIRE(BV_UART_SIRCR_RSIRE__##e)
#define BFM_UART_SIRCR_RSIRE_V(v)   BM_UART_SIRCR_RSIRE
#define BP_UART_SIRCR_TSIRE         0
#define BM_UART_SIRCR_TSIRE         0x1
#define BF_UART_SIRCR_TSIRE(v)      (((v) & 0x1) << 0)
#define BFM_UART_SIRCR_TSIRE(v)     BM_UART_SIRCR_TSIRE
#define BF_UART_SIRCR_TSIRE_V(e)    BF_UART_SIRCR_TSIRE(BV_UART_SIRCR_TSIRE__##e)
#define BFM_UART_SIRCR_TSIRE_V(v)   BM_UART_SIRCR_TSIRE

#define REG_UART_UMR(_n1)   jz_reg(UART_UMR(_n1))
#define JA_UART_UMR(_n1)    (((_n1) == 0 ? 0xb0030000 : (_n1) == 1 ? 0xb0031000 : (_n1) == 2 ? 0xb0032000 : 0xb0033000) + 0x24)
#define JT_UART_UMR(_n1)    JIO_32_RW
#define JN_UART_UMR(_n1)    UART_UMR
#define JI_UART_UMR(_n1)    (_n1)

#define REG_UART_UACR(_n1)  jz_reg(UART_UACR(_n1))
#define JA_UART_UACR(_n1)   (((_n1) == 0 ? 0xb0030000 : (_n1) == 1 ? 0xb0031000 : (_n1) == 2 ? 0xb0032000 : 0xb0033000) + 0x28)
#define JT_UART_UACR(_n1)   JIO_32_RW
#define JN_UART_UACR(_n1)   UART_UACR
#define JI_UART_UACR(_n1)   (_n1)

#endif /* __HEADERGEN_UART_H__*/

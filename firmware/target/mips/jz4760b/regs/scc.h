/***************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * This file was automatically generated by headergen, DO NOT EDIT it.
 * headergen version: 3.0.0
 * jz4760b version: 1.0
 * jz4760b authors: Amaury Pouly
 *
 * Copyright (C) 2015 by the authors
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************/
#ifndef __HEADERGEN_SCC_H__
#define __HEADERGEN_SCC_H__

#include "macro.h"

#define REG_SCC_DR  jz_reg(SCC_DR)
#define JA_SCC_DR   (0xb0040000 + 0x0)
#define JT_SCC_DR   JIO_8_RW
#define JN_SCC_DR   SCC_DR
#define JI_SCC_DR   

#define REG_SCC_FDR jz_reg(SCC_FDR)
#define JA_SCC_FDR  (0xb0040000 + 0x4)
#define JT_SCC_FDR  JIO_8_RW
#define JN_SCC_FDR  SCC_FDR
#define JI_SCC_FDR  

#define REG_SCC_CR                  jz_reg(SCC_CR)
#define JA_SCC_CR                   (0xb0040000 + 0x8)
#define JT_SCC_CR                   JIO_32_RW
#define JN_SCC_CR                   SCC_CR
#define JI_SCC_CR                   
#define BP_SCC_CR_SCCE              31
#define BM_SCC_CR_SCCE              0x80000000
#define BF_SCC_CR_SCCE(v)           (((v) & 0x1) << 31)
#define BFM_SCC_CR_SCCE(v)          BM_SCC_CR_SCCE
#define BF_SCC_CR_SCCE_V(e)         BF_SCC_CR_SCCE(BV_SCC_CR_SCCE__##e)
#define BFM_SCC_CR_SCCE_V(v)        BM_SCC_CR_SCCE
#define BP_SCC_CR_TRS               30
#define BM_SCC_CR_TRS               0x40000000
#define BF_SCC_CR_TRS(v)            (((v) & 0x1) << 30)
#define BFM_SCC_CR_TRS(v)           BM_SCC_CR_TRS
#define BF_SCC_CR_TRS_V(e)          BF_SCC_CR_TRS(BV_SCC_CR_TRS__##e)
#define BFM_SCC_CR_TRS_V(v)         BM_SCC_CR_TRS
#define BP_SCC_CR_T2R               29
#define BM_SCC_CR_T2R               0x20000000
#define BF_SCC_CR_T2R(v)            (((v) & 0x1) << 29)
#define BFM_SCC_CR_T2R(v)           BM_SCC_CR_T2R
#define BF_SCC_CR_T2R_V(e)          BF_SCC_CR_T2R(BV_SCC_CR_T2R__##e)
#define BFM_SCC_CR_T2R_V(v)         BM_SCC_CR_T2R
#define BP_SCC_CR_FDIV              24
#define BM_SCC_CR_FDIV              0x3000000
#define BV_SCC_CR_FDIV__1           0x0
#define BV_SCC_CR_FDIV__2           0x1
#define BF_SCC_CR_FDIV(v)           (((v) & 0x3) << 24)
#define BFM_SCC_CR_FDIV(v)          BM_SCC_CR_FDIV
#define BF_SCC_CR_FDIV_V(e)         BF_SCC_CR_FDIV(BV_SCC_CR_FDIV__##e)
#define BFM_SCC_CR_FDIV_V(v)        BM_SCC_CR_FDIV
#define BP_SCC_CR_FLUSH             23
#define BM_SCC_CR_FLUSH             0x800000
#define BF_SCC_CR_FLUSH(v)          (((v) & 0x1) << 23)
#define BFM_SCC_CR_FLUSH(v)         BM_SCC_CR_FLUSH
#define BF_SCC_CR_FLUSH_V(e)        BF_SCC_CR_FLUSH(BV_SCC_CR_FLUSH__##e)
#define BFM_SCC_CR_FLUSH_V(v)       BM_SCC_CR_FLUSH
#define BP_SCC_CR_TRIG              16
#define BM_SCC_CR_TRIG              0x30000
#define BV_SCC_CR_TRIG__1           0x0
#define BV_SCC_CR_TRIG__4           0x1
#define BV_SCC_CR_TRIG__8           0x2
#define BV_SCC_CR_TRIG__14          0x3
#define BF_SCC_CR_TRIG(v)           (((v) & 0x3) << 16)
#define BFM_SCC_CR_TRIG(v)          BM_SCC_CR_TRIG
#define BF_SCC_CR_TRIG_V(e)         BF_SCC_CR_TRIG(BV_SCC_CR_TRIG__##e)
#define BFM_SCC_CR_TRIG_V(v)        BM_SCC_CR_TRIG
#define BP_SCC_CR_TP                15
#define BM_SCC_CR_TP                0x8000
#define BF_SCC_CR_TP(v)             (((v) & 0x1) << 15)
#define BFM_SCC_CR_TP(v)            BM_SCC_CR_TP
#define BF_SCC_CR_TP_V(e)           BF_SCC_CR_TP(BV_SCC_CR_TP__##e)
#define BFM_SCC_CR_TP_V(v)          BM_SCC_CR_TP
#define BP_SCC_CR_CONV              14
#define BM_SCC_CR_CONV              0x4000
#define BF_SCC_CR_CONV(v)           (((v) & 0x1) << 14)
#define BFM_SCC_CR_CONV(v)          BM_SCC_CR_CONV
#define BF_SCC_CR_CONV_V(e)         BF_SCC_CR_CONV(BV_SCC_CR_CONV__##e)
#define BFM_SCC_CR_CONV_V(v)        BM_SCC_CR_CONV
#define BP_SCC_CR_TXIE              13
#define BM_SCC_CR_TXIE              0x2000
#define BF_SCC_CR_TXIE(v)           (((v) & 0x1) << 13)
#define BFM_SCC_CR_TXIE(v)          BM_SCC_CR_TXIE
#define BF_SCC_CR_TXIE_V(e)         BF_SCC_CR_TXIE(BV_SCC_CR_TXIE__##e)
#define BFM_SCC_CR_TXIE_V(v)        BM_SCC_CR_TXIE
#define BP_SCC_CR_RXIE              12
#define BM_SCC_CR_RXIE              0x1000
#define BF_SCC_CR_RXIE(v)           (((v) & 0x1) << 12)
#define BFM_SCC_CR_RXIE(v)          BM_SCC_CR_RXIE
#define BF_SCC_CR_RXIE_V(e)         BF_SCC_CR_RXIE(BV_SCC_CR_RXIE__##e)
#define BFM_SCC_CR_RXIE_V(v)        BM_SCC_CR_RXIE
#define BP_SCC_CR_TENDIE            11
#define BM_SCC_CR_TENDIE            0x800
#define BF_SCC_CR_TENDIE(v)         (((v) & 0x1) << 11)
#define BFM_SCC_CR_TENDIE(v)        BM_SCC_CR_TENDIE
#define BF_SCC_CR_TENDIE_V(e)       BF_SCC_CR_TENDIE(BV_SCC_CR_TENDIE__##e)
#define BFM_SCC_CR_TENDIE_V(v)      BM_SCC_CR_TENDIE
#define BP_SCC_CR_RTOIE             10
#define BM_SCC_CR_RTOIE             0x400
#define BF_SCC_CR_RTOIE(v)          (((v) & 0x1) << 10)
#define BFM_SCC_CR_RTOIE(v)         BM_SCC_CR_RTOIE
#define BF_SCC_CR_RTOIE_V(e)        BF_SCC_CR_RTOIE(BV_SCC_CR_RTOIE__##e)
#define BFM_SCC_CR_RTOIE_V(v)       BM_SCC_CR_RTOIE
#define BP_SCC_CR_ECIE              9
#define BM_SCC_CR_ECIE              0x200
#define BF_SCC_CR_ECIE(v)           (((v) & 0x1) << 9)
#define BFM_SCC_CR_ECIE(v)          BM_SCC_CR_ECIE
#define BF_SCC_CR_ECIE_V(e)         BF_SCC_CR_ECIE(BV_SCC_CR_ECIE__##e)
#define BFM_SCC_CR_ECIE_V(v)        BM_SCC_CR_ECIE
#define BP_SCC_CR_EPIE              8
#define BM_SCC_CR_EPIE              0x100
#define BF_SCC_CR_EPIE(v)           (((v) & 0x1) << 8)
#define BFM_SCC_CR_EPIE(v)          BM_SCC_CR_EPIE
#define BF_SCC_CR_EPIE_V(e)         BF_SCC_CR_EPIE(BV_SCC_CR_EPIE__##e)
#define BFM_SCC_CR_EPIE_V(v)        BM_SCC_CR_EPIE
#define BP_SCC_CR_RETIE             7
#define BM_SCC_CR_RETIE             0x80
#define BF_SCC_CR_RETIE(v)          (((v) & 0x1) << 7)
#define BFM_SCC_CR_RETIE(v)         BM_SCC_CR_RETIE
#define BF_SCC_CR_RETIE_V(e)        BF_SCC_CR_RETIE(BV_SCC_CR_RETIE__##e)
#define BFM_SCC_CR_RETIE_V(v)       BM_SCC_CR_RETIE
#define BP_SCC_CR_EOIE              6
#define BM_SCC_CR_EOIE              0x40
#define BF_SCC_CR_EOIE(v)           (((v) & 0x1) << 6)
#define BFM_SCC_CR_EOIE(v)          BM_SCC_CR_EOIE
#define BF_SCC_CR_EOIE_V(e)         BF_SCC_CR_EOIE(BV_SCC_CR_EOIE__##e)
#define BFM_SCC_CR_EOIE_V(v)        BM_SCC_CR_EOIE
#define BP_SCC_CR_TSEND             3
#define BM_SCC_CR_TSEND             0x8
#define BF_SCC_CR_TSEND(v)          (((v) & 0x1) << 3)
#define BFM_SCC_CR_TSEND(v)         BM_SCC_CR_TSEND
#define BF_SCC_CR_TSEND_V(e)        BF_SCC_CR_TSEND(BV_SCC_CR_TSEND__##e)
#define BFM_SCC_CR_TSEND_V(v)       BM_SCC_CR_TSEND
#define BP_SCC_CR_PX                1
#define BM_SCC_CR_PX                0x6
#define BV_SCC_CR_PX__NOT_SUPPORT   0x0
#define BV_SCC_CR_PX__STOP_LOW      0x1
#define BV_SCC_CR_PX__STOP_HIGH     0x2
#define BF_SCC_CR_PX(v)             (((v) & 0x3) << 1)
#define BFM_SCC_CR_PX(v)            BM_SCC_CR_PX
#define BF_SCC_CR_PX_V(e)           BF_SCC_CR_PX(BV_SCC_CR_PX__##e)
#define BFM_SCC_CR_PX_V(v)          BM_SCC_CR_PX
#define BP_SCC_CR_CLKSTP            0
#define BM_SCC_CR_CLKSTP            0x1
#define BF_SCC_CR_CLKSTP(v)         (((v) & 0x1) << 0)
#define BFM_SCC_CR_CLKSTP(v)        BM_SCC_CR_CLKSTP
#define BF_SCC_CR_CLKSTP_V(e)       BF_SCC_CR_CLKSTP(BV_SCC_CR_CLKSTP__##e)
#define BFM_SCC_CR_CLKSTP_V(v)      BM_SCC_CR_CLKSTP

#define REG_SCC_SR              jz_reg(SCC_SR)
#define JA_SCC_SR               (0xb0040000 + 0xc)
#define JT_SCC_SR               JIO_16_RW
#define JN_SCC_SR               SCC_SR
#define JI_SCC_SR               
#define BP_SCC_SR_TRANS         15
#define BM_SCC_SR_TRANS         0x8000
#define BF_SCC_SR_TRANS(v)      (((v) & 0x1) << 15)
#define BFM_SCC_SR_TRANS(v)     BM_SCC_SR_TRANS
#define BF_SCC_SR_TRANS_V(e)    BF_SCC_SR_TRANS(BV_SCC_SR_TRANS__##e)
#define BFM_SCC_SR_TRANS_V(v)   BM_SCC_SR_TRANS
#define BP_SCC_SR_ORER          12
#define BM_SCC_SR_ORER          0x1000
#define BF_SCC_SR_ORER(v)       (((v) & 0x1) << 12)
#define BFM_SCC_SR_ORER(v)      BM_SCC_SR_ORER
#define BF_SCC_SR_ORER_V(e)     BF_SCC_SR_ORER(BV_SCC_SR_ORER__##e)
#define BFM_SCC_SR_ORER_V(v)    BM_SCC_SR_ORER
#define BP_SCC_SR_RTO           11
#define BM_SCC_SR_RTO           0x800
#define BF_SCC_SR_RTO(v)        (((v) & 0x1) << 11)
#define BFM_SCC_SR_RTO(v)       BM_SCC_SR_RTO
#define BF_SCC_SR_RTO_V(e)      BF_SCC_SR_RTO(BV_SCC_SR_RTO__##e)
#define BFM_SCC_SR_RTO_V(v)     BM_SCC_SR_RTO
#define BP_SCC_SR_PER           10
#define BM_SCC_SR_PER           0x400
#define BF_SCC_SR_PER(v)        (((v) & 0x1) << 10)
#define BFM_SCC_SR_PER(v)       BM_SCC_SR_PER
#define BF_SCC_SR_PER_V(e)      BF_SCC_SR_PER(BV_SCC_SR_PER__##e)
#define BFM_SCC_SR_PER_V(v)     BM_SCC_SR_PER
#define BP_SCC_SR_TFTG          9
#define BM_SCC_SR_TFTG          0x200
#define BF_SCC_SR_TFTG(v)       (((v) & 0x1) << 9)
#define BFM_SCC_SR_TFTG(v)      BM_SCC_SR_TFTG
#define BF_SCC_SR_TFTG_V(e)     BF_SCC_SR_TFTG(BV_SCC_SR_TFTG__##e)
#define BFM_SCC_SR_TFTG_V(v)    BM_SCC_SR_TFTG
#define BP_SCC_SR_RFTG          8
#define BM_SCC_SR_RFTG          0x100
#define BF_SCC_SR_RFTG(v)       (((v) & 0x1) << 8)
#define BFM_SCC_SR_RFTG(v)      BM_SCC_SR_RFTG
#define BF_SCC_SR_RFTG_V(e)     BF_SCC_SR_RFTG(BV_SCC_SR_RFTG__##e)
#define BFM_SCC_SR_RFTG_V(v)    BM_SCC_SR_RFTG
#define BP_SCC_SR_TEND          7
#define BM_SCC_SR_TEND          0x80
#define BF_SCC_SR_TEND(v)       (((v) & 0x1) << 7)
#define BFM_SCC_SR_TEND(v)      BM_SCC_SR_TEND
#define BF_SCC_SR_TEND_V(e)     BF_SCC_SR_TEND(BV_SCC_SR_TEND__##e)
#define BFM_SCC_SR_TEND_V(v)    BM_SCC_SR_TEND
#define BP_SCC_SR_RETR_3        4
#define BM_SCC_SR_RETR_3        0x10
#define BF_SCC_SR_RETR_3(v)     (((v) & 0x1) << 4)
#define BFM_SCC_SR_RETR_3(v)    BM_SCC_SR_RETR_3
#define BF_SCC_SR_RETR_3_V(e)   BF_SCC_SR_RETR_3(BV_SCC_SR_RETR_3__##e)
#define BFM_SCC_SR_RETR_3_V(v)  BM_SCC_SR_RETR_3
#define BP_SCC_SR_ECNTO         0
#define BM_SCC_SR_ECNTO         0x1
#define BF_SCC_SR_ECNTO(v)      (((v) & 0x1) << 0)
#define BFM_SCC_SR_ECNTO(v)     BM_SCC_SR_ECNTO
#define BF_SCC_SR_ECNTO_V(e)    BF_SCC_SR_ECNTO(BV_SCC_SR_ECNTO__##e)
#define BFM_SCC_SR_ECNTO_V(v)   BM_SCC_SR_ECNTO

#define REG_SCC_TFR jz_reg(SCC_TFR)
#define JA_SCC_TFR  (0xb0040000 + 0x10)
#define JT_SCC_TFR  JIO_16_RW
#define JN_SCC_TFR  SCC_TFR
#define JI_SCC_TFR  

#define REG_SCC_EGTR    jz_reg(SCC_EGTR)
#define JA_SCC_EGTR     (0xb0040000 + 0x14)
#define JT_SCC_EGTR     JIO_8_RW
#define JN_SCC_EGTR     SCC_EGTR
#define JI_SCC_EGTR     

#define REG_SCC_ECR jz_reg(SCC_ECR)
#define JA_SCC_ECR  (0xb0040000 + 0x18)
#define JT_SCC_ECR  JIO_32_RW
#define JN_SCC_ECR  SCC_ECR
#define JI_SCC_ECR  

#define REG_SCC_RTOR    jz_reg(SCC_RTOR)
#define JA_SCC_RTOR     (0xb0040000 + 0x1c)
#define JT_SCC_RTOR     JIO_8_RW
#define JN_SCC_RTOR     SCC_RTOR
#define JI_SCC_RTOR     

#endif /* __HEADERGEN_SCC_H__*/

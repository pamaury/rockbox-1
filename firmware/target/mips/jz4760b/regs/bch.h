/***************************************************************************
 *             __________               __   ___.
 *   Open      \______   \ ____   ____ |  | _\_ |__   _______  ___
 *   Source     |       _//  _ \_/ ___\|  |/ /| __ \ /  _ \  \/  /
 *   Jukebox    |    |   (  <_> )  \___|    < | \_\ (  <_> > <  <
 *   Firmware   |____|_  /\____/ \___  >__|_ \|___  /\____/__/\_ \
 *                     \/            \/     \/    \/            \/
 * This file was automatically generated by headergen, DO NOT EDIT it.
 * headergen version: 3.0.0
 * jz4760b version: 1.0
 * jz4760b authors: Amaury Pouly
 *
 * Copyright (C) 2015 by the authors
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY
 * KIND, either express or implied.
 *
 ****************************************************************************/
#ifndef __HEADERGEN_BCH_H__
#define __HEADERGEN_BCH_H__

#include "macro.h"

#define REG_BCH_CTRL            jz_reg(BCH_CTRL)
#define JA_BCH_CTRL             (0xb34d0000 + 0x0)
#define JT_BCH_CTRL             JIO_32_RW
#define JN_BCH_CTRL             BCH_CTRL
#define JI_BCH_CTRL             
#define REG_BCH_CTRL_SET        jz_reg(BCH_CTRL_SET)
#define JA_BCH_CTRL_SET         (JA_BCH_CTRL + 0x4)
#define JT_BCH_CTRL_SET         JIO_32_WO
#define JN_BCH_CTRL_SET         BCH_CTRL
#define JI_BCH_CTRL_SET         
#define REG_BCH_CTRL_CLR        jz_reg(BCH_CTRL_CLR)
#define JA_BCH_CTRL_CLR         (JA_BCH_CTRL + 0x8)
#define JT_BCH_CTRL_CLR         JIO_32_WO
#define JN_BCH_CTRL_CLR         BCH_CTRL
#define JI_BCH_CTRL_CLR         
#define BP_BCH_CTRL_DMAE        7
#define BM_BCH_CTRL_DMAE        0x80
#define BF_BCH_CTRL_DMAE(v)     (((v) & 0x1) << 7)
#define BFM_BCH_CTRL_DMAE(v)    BM_BCH_CTRL_DMAE
#define BF_BCH_CTRL_DMAE_V(e)   BF_BCH_CTRL_DMAE(BV_BCH_CTRL_DMAE__##e)
#define BFM_BCH_CTRL_DMAE_V(v)  BM_BCH_CTRL_DMAE
#define BP_BCH_CTRL_BSEL        3
#define BM_BCH_CTRL_BSEL        0x38
#define BV_BCH_CTRL_BSEL__4     0x0
#define BV_BCH_CTRL_BSEL__8     0x1
#define BV_BCH_CTRL_BSEL__12    0x2
#define BV_BCH_CTRL_BSEL__16    0x3
#define BV_BCH_CTRL_BSEL__20    0x4
#define BV_BCH_CTRL_BSEL__24    0x5
#define BF_BCH_CTRL_BSEL(v)     (((v) & 0x7) << 3)
#define BFM_BCH_CTRL_BSEL(v)    BM_BCH_CTRL_BSEL
#define BF_BCH_CTRL_BSEL_V(e)   BF_BCH_CTRL_BSEL(BV_BCH_CTRL_BSEL__##e)
#define BFM_BCH_CTRL_BSEL_V(v)  BM_BCH_CTRL_BSEL
#define BP_BCH_CTRL_ENCE        2
#define BM_BCH_CTRL_ENCE        0x4
#define BF_BCH_CTRL_ENCE(v)     (((v) & 0x1) << 2)
#define BFM_BCH_CTRL_ENCE(v)    BM_BCH_CTRL_ENCE
#define BF_BCH_CTRL_ENCE_V(e)   BF_BCH_CTRL_ENCE(BV_BCH_CTRL_ENCE__##e)
#define BFM_BCH_CTRL_ENCE_V(v)  BM_BCH_CTRL_ENCE
#define BP_BCH_CTRL_BRST        1
#define BM_BCH_CTRL_BRST        0x2
#define BF_BCH_CTRL_BRST(v)     (((v) & 0x1) << 1)
#define BFM_BCH_CTRL_BRST(v)    BM_BCH_CTRL_BRST
#define BF_BCH_CTRL_BRST_V(e)   BF_BCH_CTRL_BRST(BV_BCH_CTRL_BRST__##e)
#define BFM_BCH_CTRL_BRST_V(v)  BM_BCH_CTRL_BRST
#define BP_BCH_CTRL_BCHE        0
#define BM_BCH_CTRL_BCHE        0x1
#define BF_BCH_CTRL_BCHE(v)     (((v) & 0x1) << 0)
#define BFM_BCH_CTRL_BCHE(v)    BM_BCH_CTRL_BCHE
#define BF_BCH_CTRL_BCHE_V(e)   BF_BCH_CTRL_BCHE(BV_BCH_CTRL_BCHE__##e)
#define BFM_BCH_CTRL_BCHE_V(v)  BM_BCH_CTRL_BCHE

#define REG_BCH_COUNT           jz_reg(BCH_COUNT)
#define JA_BCH_COUNT            (0xb34d0000 + 0xc)
#define JT_BCH_COUNT            JIO_32_RW
#define JN_BCH_COUNT            BCH_COUNT
#define JI_BCH_COUNT            
#define BP_BCH_COUNT_DEC        16
#define BM_BCH_COUNT_DEC        0x7ff0000
#define BF_BCH_COUNT_DEC(v)     (((v) & 0x7ff) << 16)
#define BFM_BCH_COUNT_DEC(v)    BM_BCH_COUNT_DEC
#define BF_BCH_COUNT_DEC_V(e)   BF_BCH_COUNT_DEC(BV_BCH_COUNT_DEC__##e)
#define BFM_BCH_COUNT_DEC_V(v)  BM_BCH_COUNT_DEC
#define BP_BCH_COUNT_ENC        0
#define BM_BCH_COUNT_ENC        0x7ff
#define BF_BCH_COUNT_ENC(v)     (((v) & 0x7ff) << 0)
#define BFM_BCH_COUNT_ENC(v)    BM_BCH_COUNT_ENC
#define BF_BCH_COUNT_ENC_V(e)   BF_BCH_COUNT_ENC(BV_BCH_COUNT_ENC__##e)
#define BFM_BCH_COUNT_ENC_V(v)  BM_BCH_COUNT_ENC

#define REG_BCH_DATA    jz_reg(BCH_DATA)
#define JA_BCH_DATA     (0xb34d0000 + 0x10)
#define JT_BCH_DATA     JIO_8_RW
#define JN_BCH_DATA     BCH_DATA
#define JI_BCH_DATA     

#define REG_BCH_PARITY(_n1) jz_reg(BCH_PARITY(_n1))
#define JA_BCH_PARITY(_n1)  (0xb34d0000 + 0x14 + 4 *((_n1)))
#define JT_BCH_PARITY(_n1)  JIO_32_RW
#define JN_BCH_PARITY(_n1)  BCH_PARITY
#define JI_BCH_PARITY(_n1)  (_n1)

#define REG_BCH_ERROR(_n1)              jz_reg(BCH_ERROR(_n1))
#define JA_BCH_ERROR(_n1)               (0xb34d0000 + 0x3C + 4*((_n1)))
#define JT_BCH_ERROR(_n1)               JIO_32_RW
#define JN_BCH_ERROR(_n1)               BCH_ERROR
#define JI_BCH_ERROR(_n1)               (_n1)
#define BP_BCH_ERROR_INDEX_ODD          16
#define BM_BCH_ERROR_INDEX_ODD          0x1fff0000
#define BF_BCH_ERROR_INDEX_ODD(v)       (((v) & 0x1fff) << 16)
#define BFM_BCH_ERROR_INDEX_ODD(v)      BM_BCH_ERROR_INDEX_ODD
#define BF_BCH_ERROR_INDEX_ODD_V(e)     BF_BCH_ERROR_INDEX_ODD(BV_BCH_ERROR_INDEX_ODD__##e)
#define BFM_BCH_ERROR_INDEX_ODD_V(v)    BM_BCH_ERROR_INDEX_ODD
#define BP_BCH_ERROR_INDEX_EVEN         0
#define BM_BCH_ERROR_INDEX_EVEN         0x1fff
#define BF_BCH_ERROR_INDEX_EVEN(v)      (((v) & 0x1fff) << 0)
#define BFM_BCH_ERROR_INDEX_EVEN(v)     BM_BCH_ERROR_INDEX_EVEN
#define BF_BCH_ERROR_INDEX_EVEN_V(e)    BF_BCH_ERROR_INDEX_EVEN(BV_BCH_ERROR_INDEX_EVEN__##e)
#define BFM_BCH_ERROR_INDEX_EVEN_V(v)   BM_BCH_ERROR_INDEX_EVEN

#define REG_BCH_INTS            jz_reg(BCH_INTS)
#define JA_BCH_INTS             (0xb34d0000 + 0x6c)
#define JT_BCH_INTS             JIO_32_RW
#define JN_BCH_INTS             BCH_INTS
#define JI_BCH_INTS             
#define BP_BCH_INTS_ERRC        27
#define BM_BCH_INTS_ERRC        0xf8000000
#define BF_BCH_INTS_ERRC(v)     (((v) & 0x1f) << 27)
#define BFM_BCH_INTS_ERRC(v)    BM_BCH_INTS_ERRC
#define BF_BCH_INTS_ERRC_V(e)   BF_BCH_INTS_ERRC(BV_BCH_INTS_ERRC__##e)
#define BFM_BCH_INTS_ERRC_V(v)  BM_BCH_INTS_ERRC
#define BP_BCH_INTS_ALL0        5
#define BM_BCH_INTS_ALL0        0x20
#define BF_BCH_INTS_ALL0(v)     (((v) & 0x1) << 5)
#define BFM_BCH_INTS_ALL0(v)    BM_BCH_INTS_ALL0
#define BF_BCH_INTS_ALL0_V(e)   BF_BCH_INTS_ALL0(BV_BCH_INTS_ALL0__##e)
#define BFM_BCH_INTS_ALL0_V(v)  BM_BCH_INTS_ALL0
#define BP_BCH_INTS_ALLf        4
#define BM_BCH_INTS_ALLf        0x10
#define BF_BCH_INTS_ALLf(v)     (((v) & 0x1) << 4)
#define BFM_BCH_INTS_ALLf(v)    BM_BCH_INTS_ALLf
#define BF_BCH_INTS_ALLf_V(e)   BF_BCH_INTS_ALLf(BV_BCH_INTS_ALLf__##e)
#define BFM_BCH_INTS_ALLf_V(v)  BM_BCH_INTS_ALLf
#define BP_BCH_INTS_DECF        3
#define BM_BCH_INTS_DECF        0x8
#define BF_BCH_INTS_DECF(v)     (((v) & 0x1) << 3)
#define BFM_BCH_INTS_DECF(v)    BM_BCH_INTS_DECF
#define BF_BCH_INTS_DECF_V(e)   BF_BCH_INTS_DECF(BV_BCH_INTS_DECF__##e)
#define BFM_BCH_INTS_DECF_V(v)  BM_BCH_INTS_DECF
#define BP_BCH_INTS_ENCF        2
#define BM_BCH_INTS_ENCF        0x4
#define BF_BCH_INTS_ENCF(v)     (((v) & 0x1) << 2)
#define BFM_BCH_INTS_ENCF(v)    BM_BCH_INTS_ENCF
#define BF_BCH_INTS_ENCF_V(e)   BF_BCH_INTS_ENCF(BV_BCH_INTS_ENCF__##e)
#define BFM_BCH_INTS_ENCF_V(v)  BM_BCH_INTS_ENCF
#define BP_BCH_INTS_UNCOR       1
#define BM_BCH_INTS_UNCOR       0x2
#define BF_BCH_INTS_UNCOR(v)    (((v) & 0x1) << 1)
#define BFM_BCH_INTS_UNCOR(v)   BM_BCH_INTS_UNCOR
#define BF_BCH_INTS_UNCOR_V(e)  BF_BCH_INTS_UNCOR(BV_BCH_INTS_UNCOR__##e)
#define BFM_BCH_INTS_UNCOR_V(v) BM_BCH_INTS_UNCOR
#define BP_BCH_INTS_ERR         0
#define BM_BCH_INTS_ERR         0x1
#define BF_BCH_INTS_ERR(v)      (((v) & 0x1) << 0)
#define BFM_BCH_INTS_ERR(v)     BM_BCH_INTS_ERR
#define BF_BCH_INTS_ERR_V(e)    BF_BCH_INTS_ERR(BV_BCH_INTS_ERR__##e)
#define BFM_BCH_INTS_ERR_V(v)   BM_BCH_INTS_ERR

#define REG_BCH_INTE    jz_reg(BCH_INTE)
#define JA_BCH_INTE     (0xb34d0000 + 0x70)
#define JT_BCH_INTE     JIO_32_RW
#define JN_BCH_INTE     BCH_INTE
#define JI_BCH_INTE     

#endif /* __HEADERGEN_BCH_H__*/
